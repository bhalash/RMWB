@mixin breakpoint($point, $size: '') {
    $cell_min: 200px;
    $cell_max: 599px;

    $tablet_min: 600px;
    $tablet_max: 1024px;

    @if $point == smartphone {
        @media only screen and (min-device-width: $cell_min) and (max-device-width: $cell_max) and (orientation: portrait), 
        only screen and (min-device-width: $cell_min) and (max-device-width: $cell_max) and (orientation: landscape) {
            @content;  
        }
    }

    @if $point == tablet {
        @media only screen and (min-device-width: $tablet_min) and (max-device-width: $tablet_max) and (orientation: portrait), 
        only screen and (min-device-width: $tablet_min) and (max-device-width: $tablet_max) and (orientation: landscape) {
            @content;
        }
    }

    @if $point == portrait {
        @media only screen and (orientation: portrait) {
            @content;
        }
    }

    @if $point == landscape {
        @media only screen and (orientation: landscape) {
            @content;
        }
    }

    @if $point == max {
        @media only screen and (max-width: $size + px) {
            @content;
        }
    }

    @if $point == min {
        @media only screen and (min-width: $size + px) {
            @content;
        }
    }
}

/*
 * Vendor Property and Value Prefixes
 * ----------------------------------
 */

@mixin prefix($property, $value) {
    // Automatically add vendor prefixed to a CSS property.
    -moz-#{$property}: $value;
    -ms-#{$property}: $value;
    -webkit-#{$property}: $value;
    #{$property}: $value;
}

@mixin prefix_value($property, $value) {
    // Automatically add vendor prefixed to a CSS value.
    #{$property}: -moz-#{$value};
    #{$property}: -ms-#{$value};
    #{$property}: -webkit-#{$value};
    #{$property}: $value;
}

@mixin webkit($property, $value) {
    /* Flexbox rules need to be prefixed with -webkit for Safari Mobile. Using
     * the general prefix mixin for flexbox cluttered up the compiled CSS with 
     * useless rules. */
    -webkit-#{$property}: $value;
    #{$property}: $value;
}

@mixin webkit_value($property, $value) {
    #{$property}: -webkit-#{$value};
    #{$property}: $value;
}

/*
 * Miscellaneous Mixins
 * --------------------
 */

@mixin cover_image($image) {
    // background-position: center 20%;
    background-image: url($image);
    background-position: center center;
    background-repeat: no-repeat;
    background-size: cover; 
}

@mixin flex_size($width, $ratio) {
    // Ratio should be between 0 and foo.
    display: inline-block;
    height: 0;
    padding-bottom: $width * $ratio;
    width: $width;
}

@mixin vertical_center($amount) {
    // Useful for vertically centering elements.
    padding-bottom: $amount;
    padding-top: $amount;
}

@function rgba_opposite($red: 255, $green: 255, $blue: 255, $alpha: 0) {
    // I do not intend for this to be called directly. 
    // This function inverts RGB colours.
    $red: 255 - $red;
    $green: 255 - $green;
    $blue: 255 - $blue;
    $alpha: 1 - $alpha;

    @return rgba($red, $green, $blue, $alpha);
}

@mixin columns($count, $gap) {
    @include prefix(column-count, $count);
    @include prefix(column-gap, $gap);
}

@mixin placeholder_style() {
    &::-webkit-input-placeholder {
       @content;
    }

    &::-webkit-input-placeholder {
        @content;
    }

    &:-moz-placeholder {
        @content;
        opacity: 1;
    }

    &::-moz-placeholder {
        @content;
        opacity: 1;
    }

    &:-ms-input-placeholder {
        @content;
    }
}

@mixin light_mask($opacity) {
    background-color: rgba(255,255,255, $opacity);
}

@mixin dark_mask($opacity) {
    background-color: rgba(24,41,77, $opacity);
}
